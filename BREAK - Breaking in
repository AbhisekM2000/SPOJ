/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    Problem Name : BREAK - Breaking in ( SPOJ )
    ALGORITHM : SCC
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846
#define maxi 9000

typedef long long ll ;
typedef unsigned long long ull ;

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction

int N , M , t , cycle , dt[maxi+10] , ft[maxi+10] , ct[maxi+10] , outdegree[maxi+10] ;
bool visit[maxi+10] ;
vector <int> G[maxi+10] , GT[maxi+10] , Q ;

void dfs1(int u)
{
    visit[u] = true ;
    dt[u] = ++t ;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i] ;
        if(!visit[v]) dfs1(v);
    }
    ft[u] = ++t ;
    Q.pb(u);
}

void dfs2(int u,int cmp)
{
    visit[u] = false ;
    ct[u] = cycle ;
    for(int i=0;i<GT[u].size();i++)
    {
        int v = GT[u][i] ;
        if(visit[v]&&cmp>ft[v]) dfs2(v,cmp);
    }
}

int dfs3(int u)
{
    visit[u] = true ;
    int ret = 0 ;
    for(int i=0;i<GT[u].size();i++)
    {
        int v = GT[u][i] ;
        if(visit[v]==false) ret+=dfs3(v);
    }
    return ret+1;
}

void Reset()
{
    t = 0 ;
    cycle = 1 ;
    Q.clear();
    for(int i=0;i<=maxi;i++)
    {
        G[i].clear();
        GT[i].clear();
        outdegree[i] = 0 ;
        visit[i] =  false ;
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int T ;
    scanf("%d",&T);
    while( T-- )
    {
        Reset();
        scanf("%d%d",&N,&M);
        while( M-- )
        {
            int A , B ;
            scanf("%d%d",&A,&B);
            G[A].pb(B);
            GT[B].pb(A);
        }

        for(int i=1;i<=N;i++) if(!visit[i]) dfs1(i);
        for(int i=Q.size()-1;i>=0;i--) if(visit[Q[i]]) { dfs2(Q[i],ft[Q[i]]); cycle++; }

        for(int u=1;u<=N;u++)
        {
            for(int i=0;i<G[u].size();i++)
            {
                int v = G[u][i] ;
                if(ct[u]!=ct[v]) outdegree[ct[u]]--; // make negative which is not certainly answer node .
            }
        }

        int mx = 0 ;

        for(int i=1;i<=N;i++)
        {
            if(outdegree[ct[i]]==0)
            {
                memo(visit,false);
                outdegree[ct[i]] = dfs3(i) ;
                mx=max(mx,outdegree[ct[i]]);
            }
        }

        bool flag = true ;
        for(int i=1;i<=N;i++)
        {
            if(outdegree[ct[i]]==mx)
            {
                if(flag) flag = false ; else printf(" ");
                printf("%d",i);
            }
        }
        puts("");
    }
    return 0;
}

/*
3

5 4
3 1
3 2
4 3
5 3

6 5
1 2
2 3
3 1
1 4
5 6

11 8
1 2
1 3
2 10
3 10
3 4
6 5
7 5
8 5
*/
/*
1 2
4
5 10
*/
