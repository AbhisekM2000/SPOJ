/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    ALGORITHM :SCC
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846

typedef long long ll ;
typedef unsigned long long ull ;

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
int N , H , P , S , t , cnt , now , dt[200000+10] , ft[200000+10] ;
bool visit[200000+10];
vector <int> G[200000+10] , GT[200000+10] , Q ;
void dfs1(int u)
{
    visit[u] = true ;
    dt[u] = ++t ;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i] ;
        if(!visit[v]) dfs1(v);
    }
    ft[u] = ++t ;
    Q.pb(u);
}
void dfs2(int u,int cmp)
{
    visit[u] = false ;
    if(u>1000) cnt++;else now = min(now,u);
    for(int i=0;i<GT[u].size();i++)
    {
        int v = GT[u][i] ;
        if(visit[v]&&cmp>ft[v]) dfs2(v,cmp);
    }
}
void RESET()
{
    Q.clear();
    t = 0 ;
    for(int i=0;i<=200000;i++)
    {
        G[i].clear();
        GT[i].clear();
        visit[i] = false ;
    }
}
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    scanf("%d",&N);
    while( N-- )
    {
        RESET();
        scanf("%d%d%d",&H,&P,&S);
        while( S-- )
        {
            int u , v ;
            scanf("%d%d",&u,&v);
            G[u].pb(v);
            GT[v].pb(u);
        }
        for(int i=1;i<=H;i++) if(!visit[i]) dfs1(i);
        for(int i=1001;i<=1000+P;i++) if(!visit[i]) dfs1(i);
        int ans = 1001 , mx = 0 ;
        for(int i=Q.size()-1;i>=0;i--)
        if(visit[Q[i]])
        {
            cnt = 0 ; now = 1001 ;
            dfs2(Q[i],ft[Q[i]]) ;
            if(cnt>mx&&now<1001) mx = cnt , ans = now ;
            else if(cnt==mx&&now<1001) ans = min(ans,now);
        }
        cout << ans << ' ' << mx << endl ;
    }
    return 0;
}
